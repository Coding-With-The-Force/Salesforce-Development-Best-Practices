<?xml version="1.0"?>

<ruleset name="Apex Code Health Check"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">

    <description>
        Apex Code Health Check
    </description>


    <rule ref="category/apex/bestpractices.xml/ApexAssertionsShouldIncludeMessage" message="Assertions in test classes should always provide a message. Please add a message to your assertion.">
        <priority>3</priority>
        <description>
            Assertions in test classes should always provide a message. Please add a message to your assertion.
        </description>
        <example>
            <![CDATA[System.assertEquals(1, list.size(), 'The list wasn\'t the right size. Sorry Bro, try again.');]]>
        </example>
    </rule>

    <rule ref="category/apex/bestpractices.xml/ApexUnitTestClassShouldHaveAsserts" message="All test methods should have assertions in them. You must go back and add appropriate assertions to your test methods.">
        <priority>1</priority>
        <description>
            All test methods should have assertions in them. You must go back and add appropriate assertions to your test methods.
        </description>
        <example>
            <![CDATA[System.assertEquals('I have an assertion in my test method', stringVariable, 'The strings didn\'t match up bruh, your test is broke.');]]>
        </example>
    </rule>

    <rule ref="category/apex/bestpractices.xml/ApexUnitTestMethodShouldHaveIsTestAnnotation" message="You need the @isTest annotation above all test methods please.">
        <priority>1</priority>
        <description>
            You need the @isTest annotation above all test methods please.
        </description>
        <example>
            <![CDATA[@isTest
            public static void aMethod_Test
            {
                //Code
            }]]>
        </example>
    </rule>

    <rule ref="category/apex/bestpractices.xml/ApexUnitTestShouldNotUseSeeAllDataTrue" message="See All Data = true should never be utilized in test classes. Please remove it and use the ObjectCreator to create test data.">
        <priority>1</priority>
        <description>
            See All Data = true should never be utilized in test classes. Please remove it and use the ObjectCreator to create test data.
        </description>
        <example>
            <![CDATA[
            //Never ever use this annotation
            @isTest(SeeAllData=true)
            public class testClass
            {

            }
            ]]>
        </example>
    </rule>

    <rule ref="category/apex/bestpractices.xml/AvoidGlobalModifier" message="Avoid the global modifier wherever possible. Use it only when absolutely necessary. The global declaration is a security risk due to accessibility.">
        <priority>3</priority>
        <description>
            Avoid the global modifier wherever possible. Use it only when absolutely necessary. The global declaration is a security risk due to accessibility.
        </description>
        <example>
            <![CDATA[global class ClassThatCanBeAccessedByAnyNamespace
                    {
                    }]]>
        </example>
    </rule>

    <rule ref="category/apex/bestpractices.xml/AvoidLogicInTrigger" message="Never put logic in a trigger. Utilize the TriggerHandler virtual class. Utilizing this framework is much cleaner and allows for easier testing of the trigger. More info the framework can be found here: https://github.com/kevinohara80/sfdc-trigger-framework">
        <priority>1</priority>
        <description>
            Never put logic in a trigger. Utilize the TriggerHandler virtual class. Utilizing this framework is much cleaner and allows for easier testing of the trigger. More info the framework can be found here: https://github.com/kevinohara80/sfdc-trigger-framework
        </description>
        <example>
            <![CDATA[
                //Trigger Example
                trigger triggerName on Object (before insert, before update, before delete, after insert, after update)
                {
                    new ObjectTriggerHandler().run();
                }

                //Trigger Handler Example
                public with sharing class ObjectTriggerHandler extends TriggerHandler
                {
                    private Map<Id, object> objectOldMap;
                    private List<object> objectNewList;
                    private List<object> objectOldList;
                    private String opType;

                    public CRM_ContactJunction_Trigger_Handler()
                    {
                        this.objectOldMap = (Map<Id, object>)trigger.oldMap;
                        this.objectNewList = (List<object>)trigger.new;
                        this.objectOldList = (List<object>)trigger.old;
                        this.opType = String.valueOf(trigger.operationType);
                    }

                    public override void beforeInsert()
                    {
                        //logic here
                    }

                    public override void beforeUpdate()
                    {
                        //logic here
                    }

                    public override void beforeDelete()
                    {
                        //logic here
                    }

                    public override void afterInsert()
                    {
                        ///logic here
                    }

                    public override void afterUpdate()
                    {
                        //logic here
                    }
                }
            ]]>
        </example>
    </rule>

    <rule ref="category/apex/codestyle.xml/ClassNamingConventions" message="Please follow pascal case rules when naming your classes.">
        <priority>4</priority>
        <description>
            Please follow pascal case rules when naming your classes.
        </description>
        <example>
            <![CDATA[public class ThisIsTheCorrectCasingForClasses]]>
        </example>
    </rule>

    <rule ref="category/apex/codestyle.xml/FieldNamingConventions" message="Please camel case your field names appropritately.">
        <priority>4</priority>
        <description>
            Please camel case your field names appropritately.
        </description>
        <example>
            <![CDATA[
                    public String camelCase
                    public static final String FINAL_VARIABLE_NAMING
            ]]>
        </example>
        <properties>
            <property name="enumConstantPattern" value="[A-Z][A-Z0-9_]*" />
            <property name="constantPattern" value="[A-Z][A-Z0-9_]*" />
            <property name="finalPattern" value="[a-z][a-zA-Z0-9]*" />
            <property name="staticPattern" value="[a-z][a-zA-Z0-9]*" />
            <property name="instancePattern" value="[a-z][a-zA-Z0-9]*" />
        </properties>
    </rule>

    <rule ref="category/apex/codestyle.xml/ForLoopsMustUseBraces" message="Please always utilizes braces with your for loops.">
        <priority>4</priority>
        <description>
            Please always utilizes braces with your for loops.
        </description>
        <example>
            <![CDATA[for(Object obj: ObjectList)
                    {
                    }]]>
        </example>
    </rule>

    <rule ref="category/apex/codestyle.xml/FormalParameterNamingConventions" message="Please camel case your parameter names appropriately.">
        <priority>4</priority>
        <description>
            Please camel case your parameter names appropriately.
        </description>
        <example>
            <![CDATA[public void methodName(String methodParameter){}]]>
        </example>
    </rule>

    <rule ref="category/apex/codestyle.xml/IfElseStmtsMustUseBraces" message="Please always utilizes braces with your if else statements.">
        <priority>4</priority>
        <description>
            Please always utilizes braces with your if else statements.
        </description>
        <example>
            <![CDATA[if(variableTrue)
                    {
                    }
                    else
                    {
                    }]]>
        </example>
    </rule>

    <rule ref="category/apex/codestyle.xml/IfStmtsMustUseBraces" message="Please always utilizes braces with your if else statements.">
        <priority>4</priority>
        <description>
            Please always utilizes braces with your if else statements.
        </description>
        <example>
            <![CDATA[if(variableTrue)
                    {
                    }
                    else
                    {
                    }]]>
        </example>
    </rule>

    <rule ref="category/apex/codestyle.xml/LocalVariableNamingConventions" message="Please camel case your local method variables.">
        <priority>4</priority>
        <description>
            Please camel case your local method variables.
        </description>
        <example>
            <![CDATA[public void methodName()
                    {
                        String camelCase;
                    }]]>
        </example>
        <properties>
            <property name="finalLocalPattern" value="[a-z][a-zA-Z0-9]*" />
            <property name="localPattern" value="[a-z][a-zA-Z0-9]*" />
        </properties>
    </rule>

    <rule ref="category/apex/codestyle.xml/MethodNamingConventions" message="Please camel case your method names.">
        <priority>4</priority>
        <description>
            Please camel case your method names.
        </description>
        <example>
            <![CDATA[public void methodName()
                    {
                        String camelCase;
                    }]]>
        </example>
    </rule>

    <rule ref="category/apex/codestyle.xml/OneDeclarationPerLine" message="Each variable should be declared on its own line please.">
        <priority>4</priority>
        <properties>
            <property name="strictMode" value="true" />
        </properties>
    </rule>
    <rule ref="category/apex/codestyle.xml/PropertyNamingConventions" message="Variables should always be declared with camel casing."/>
    <rule ref="category/apex/codestyle.xml/WhileLoopsMustUseBraces" message="All while statements must utilize braces."/>

    <rule ref="category/apex/design.xml/AvoidDeeplyNestedIfStmts" message="Please try to limit the depth of your if statements. It can lead to confusing code. Try breaking out your code more or filtering down your SOQL queries.">
        <properties>
            <property name="problemDepth" value="3" />
        </properties>
    </rule>
    <rule ref="category/apex/design.xml/CyclomaticComplexity">
        <properties>
            <property name="classReportLevel" value="40" />
            <property name="methodReportLevel" value="10" />
        </properties>
    </rule>
    <rule ref="category/apex/design.xml/ExcessiveClassLength" message="Your class should not be greater than 1000 lines of code. If it is it needs to be broken out into multiple classes. Please follow object oriented code design patterns.">
        <properties>
            <property name="minimum" value="1000.0" />
        </properties>
    </rule>
    <rule ref="category/apex/design.xml/ExcessiveParameterList" message="Your method takes in too many parameters. Maybe try using a wrapper class or a JSON object to pass those variables. Alternatively break the method into multiple methods.">
        <properties>
            <property name="minimum" value="4.0" />
        </properties>
    </rule>
    <rule ref="category/apex/design.xml/ExcessivePublicCount" message="Your method has too many publicly accessible entities (methods, variables, etc.). You should consider utilizing private and protected class members.">
        <properties>
            <property name="minimum" value="20.0" />
        </properties>
    </rule>
    <rule ref="category/apex/design.xml/NcssConstructorCount" message="Your constructor is larger than it likely should be (greater than 20 lines). You should pull out the logic and put it into different methods in the class.">
        <properties>
            <property name="minimum" value="20.0" />
        </properties>
    </rule>
    <rule ref="category/apex/design.xml/NcssMethodCount" message="Your method is larger than it likely should be (greater than 40 lines). You should consider pulling out the logic and putting it into different methods in the class.">
        <properties>
            <property name="minimum" value="40.0" />
        </properties>
    </rule>
    <rule ref="category/apex/design.xml/NcssTypeCount">
        <properties>
            <property name="minimum" value="500.0" />
        </properties>
    </rule>
    <rule ref="category/apex/design.xml/StdCyclomaticComplexity">
        <properties>
            <property name="reportLevel" value="10" />
            <property name="showClassesComplexity" value="true" />
            <property name="showMethodsComplexity" value="true" />
        </properties>
    </rule>

    <rule ref="category/apex/errorprone.xml/ApexCSRF" />
    <rule ref="category/apex/errorprone.xml/AvoidDirectAccessTriggerMap" />
    <rule ref="category/apex/errorprone.xml/AvoidHardcodingId" />
    <rule ref="category/apex/errorprone.xml/AvoidNonExistentAnnotations" />
    <rule ref="category/apex/errorprone.xml/EmptyCatchBlock" />
    <rule ref="category/apex/errorprone.xml/EmptyIfStmt" />
    <rule ref="category/apex/errorprone.xml/EmptyStatementBlock" />
    <rule ref="category/apex/errorprone.xml/EmptyTryOrFinallyBlock" />
    <rule ref="category/apex/errorprone.xml/EmptyWhileStmt" />
    <rule ref="category/apex/errorprone.xml/MethodWithSameNameAsEnclosingClass" />

    <rule ref="category/apex/performance.xml/AvoidDmlStatementsInLoops" />
    <rule ref="category/apex/performance.xml/AvoidSoqlInLoops" />
    <rule ref="category/apex/performance.xml/AvoidSoslInLoops" />

</ruleset>
